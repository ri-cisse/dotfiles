global !p
fn_base = fn.split(os.extsep)[0];
endglobal

# react
snippet cdm "component did mount" b
componentDidMount() {
	${1}
}
endsnippet

snippet cdup "component did update" b
componentDidUpdate(prevProps, prevState) {
	${1}
}
endsnippet

snippet cwm "component will mount" b
componentWillMount() {
	${1}
}
endsnippet

# --------- rcf react class function
snippet rcf "React Component as pure function"
import React from 'react';

export default function `!p snip.rv = fn_base`(${1:props}) {
	return (
		${2:<div>`!p snip.rv = fn_base`</div>}
	);
}
endsnippet

snippet cwrp "component will receive props" b
componentWillReceiveProps(nextProps) {
	${1}
}
endsnippet

snippet cwun "component will unmount" b
componentWillUnmount() {
	${1}
}
endsnippet

snippet cwu "component will update" b
componentWillUpdate(nextProps, nextState) {
	${1}
}
endsnippet

snippet scu "should component update" b
shouldComponentUpdate(nextProps, nextState) {
	${1}
}
endsnippet

snippet re "render" b
render() {
	return (
		${1}
	);
}
endsnippet

snippet "6unc?" "function" !r
(${1:arg}) => {
	${VISUAL}$2
}
endsnippet

snippet "func?" "function" !r
function ${1: name}(${2:arg}) {
	${VISUAL}$3
}
endsnippet

snippet i}
import { $1 } from '$2';
endsnippet

snippet i
import $1 from '$2';
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${2:value},$0
endsnippet

# Snippets for Console Debug Output
snippet cl
console.log($1)$0
endsnippet

# Snippets for Console Debug Output
snippet ce
console.error($1)$0
endsnippet

snippet react
import React from 'react';

export default class $1 extends React.Component {
	render() {
		$2
	}
}$0
endsnippet

snippet icx "Import classnames" b
import cx from 'classnames';
endsnippet

snippet imm "Import immutable" b
import ${1:Immutable} from 'immutable';
endsnippet

snippet ed "Export default" b
export default $0
endsnippet

# Debugging
snippet de
debugger;
endsnippet

# JSON.parse
snippet jsonp
JSON.parse(${1:jstr})$0
endsnippet
# JSON.stringify
snippet jsons
JSON.stringify(${1:object})$0
endsnippet

# Flow control
# if
snippet if
if (${1}) {
	${2}
}${0}
endsnippet
# if ... else
snippet ife
if (${1}) {
	${2}
} else {
	${3}
}${0}
endsnippet
# tertiary conditional
snippet ter
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet
# switch
snippet switch
switch (${1:expression}) {
	${0}
}
endsnippet
# case
snippet case
case '${1:case}':
${2}
break;
${0}
endsnippet
# default
snippet def
default:
	${0}
endsnippet
# try
snippet try
try {
	${1}
} catch (${2:e}) {
	${0:/* handle error */}
}
endsnippet
# try finally
snippet tryf
try {
	${1}
} catch (${2:e}) {
	${0:/* handle error */}
} finally {
	${3:/* be executed regardless of the try / catch result*/}
}
endsnippet
# throw Error
snippet terr
throw new Error('${1:error message}')
endsnippet
# return
snippet ret
return ${0:result};
endsnippet
# for loop
snippet for
for (let ${2:i} = 0, len = ${1:arr}.length; $2 < len; $2++) {
	${3:}
}
endsnippet
# Reversed for loop
snippet forr
for (let ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2--) {
	${3:}
}
endsnippet
# While loop
snippet wh
while (${1:/* condition */}) {
	${2}
}
endsnippet
# Do while loop
snippet do
do {
	${2}
} while (${1:/* condition */});
endsnippet
# For in loop
snippet fori
for (const ${1:prop} in ${2:object}) {
	$3
}
endsnippet

snippet fe
function ($1) {
	$2
}
endsnippet

snippet f
function ($1) { $2 }
endsnippet

snippet af
($1) => $2
endsnippet

snippet afe
($1) => {
	$2
}
endsnippet

snippet keyOf
export const $1 = keyOf({$1: null});$0
endsnippet
